'''
Run this code and check to 'windows\temp'folder for screenshot
@@Paranoid0x0x
'''
import win32gui
import win32ui
import win32con
import win32api
'''grab a handle to the main desktop window which includes the entire 
viewable area across multiple monitors'''
hdesktop = win32gui.GetDesktopWindow()
# determine the size of all monitors in pixels
width = win32api.GetSystemMetrics(win32con.SM_CXVIRTUALSCREEN) 
height = win32api.GetSystemMetrics(win32con.SM_CYVIRTUALSCREEN)
left = win32api.GetSystemMetrics(win32con.SM_XVIRTUALSCREEN)
top = win32api.GetSystemMetrics(win32con.SM_YVIRTUALSCREEN)
'''create a device context using the GetWindowDC function call and pass
 in a handle to our desktop'''
desktop_dc = win32gui.GetWindowDC(hdesktop) 
img_dc = win32ui.CreateDCFromHandle(desktop_dc)
'''create a memory based device context store our image capture until we store
 the bitmap bytes to a file'''
mem_dc = img_dc.CreateCompatibleDC()
# create a bitmap object that is set to the device context of our desktop
screenshot = win32ui.CreateBitmap()
screenshot.CreateCompatibleBitmap(img_dc, width, height)
'''SelectObject call  sets the memory-based device context to point 
at the bitmap object that weâ€™re capturing'''
mem_dc.SelectObject(screenshot)
# copy the screen into our memory device context
'''We use the BitBlt function to take a bit-for-bit copy of the desktop
 image and store it in the memory based context. '''
mem_dc.BitBlt((0, 0), (width, height), img_dc, (left, top), win32con.SRCCOPY)
# save the bitmap to a file
screenshot.SaveBitmapFile(mem_dc, 'c:\\WINDOWS\\Temp\\screenshot.bmp')
# free our objects
mem_dc.DeleteDC()
win32gui.DeleteObject(screenshot.GetHandle())